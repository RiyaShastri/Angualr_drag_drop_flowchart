/// <reference types="gapi.auth2" />
import { AfterViewInit } from '@angular/core';
import { UploaderComponent } from '@syncfusion/ej2-angular-inputs';
import { AppService } from '../app.service';
import { OpenCloseMenuEventArgs, MenuEventArgs as ContextMenuEventArgs, ClickEventArgs, ToolbarComponent, MenuAnimationSettingsModel } from '@syncfusion/ej2-angular-navigations';
import { BeforeOpenCloseMenuEventArgs, MenuEventArgs, DropDownButtonComponent } from '@syncfusion/ej2-angular-splitbuttons';
import { DialogComponent, PositionDataModel, TooltipEventArgs, Position } from '@syncfusion/ej2-angular-popups';
import { AnimationSettingsModel, TooltipComponent } from '@syncfusion/ej2-angular-popups';
import { FieldSettingsModel, DropDownListComponent } from '@syncfusion/ej2-angular-dropdowns';
import { ButtonComponent } from '@syncfusion/ej2-angular-buttons';
import { Diagram, NodeModel, ConnectorModel, Node, Connector, Overview, UserHandleModel, CommandManagerModel } from '@syncfusion/ej2-diagrams';
import { PageCreation } from '../scripts/pages';
import { SelectorViewModel } from '../scripts/selector';
import { CustomProperties } from '../scripts/customproperties';
import { DiagramBuilderLayer } from '../scripts/layers';
import { DropDownDataSources } from '../scripts/dropdowndatasource';
import { DownloadExampleFiles } from '../scripts/downloaddata';
import { DiagramTheme } from '../scripts/themes';
import { DiagramClientSideEvents, DiagramPropertyBinding, MindMapPropertyBinding, OrgChartPropertyBinding } from '../scripts/events';
export declare class HomeComponent implements AfterViewInit {
    ApiService: AppService;
    constructor(ApiService: AppService);
    googleAuth: gapi.auth2.GoogleAuth;
    post: any;
    printDialog: DialogComponent;
    exportDialog: DialogComponent;
    fileUploadDialog: DialogComponent;
    openTemplateDialog: DialogComponent;
    saveDialog: DialogComponent;
    customPropertyDialog: DialogComponent;
    layerDialog: DialogComponent;
    tooltipDialog: DialogComponent;
    hyperlinkDialog: DialogComponent;
    themeDialog: DialogComponent;
    deleteConfirmationDialog: DialogComponent;
    btnHelpMenu: DropDownButtonComponent;
    toolbarEditor: ToolbarComponent;
    btnDrawShape: DropDownButtonComponent;
    btnDrawConnector: DropDownButtonComponent;
    defaultupload: UploaderComponent;
    tooltip: TooltipComponent;
    btnDownloadFile: ButtonComponent;
    ddlTextPosition: DropDownListComponent;
    animationSettings: MenuAnimationSettingsModel;
    dropdownListFields: FieldSettingsModel;
    dialogAnimationSettings: AnimationSettingsModel;
    dlgTarget: HTMLElement;
    exportingButtons: Object[];
    printingButtons: Object[];
    saveButtons: Object[];
    tooltipButtons: Object[];
    hyperlinkButtons: Object[];
    deleteConfirmationButtons: Object[];
    uploadButtons: Object[];
    dialogPosition: PositionDataModel;
    dialogVisibility: boolean;
    isModalDialog: boolean;
    themesdialogPosition: PositionDataModel;
    tooltipPosition: Position;
    path: Object;
    dropDownDataSources: DropDownDataSources;
    selectedItem: SelectorViewModel;
    page: PageCreation;
    customProperty: CustomProperties;
    diagramLayer: DiagramBuilderLayer;
    diagramEvents: DiagramClientSideEvents;
    diagramPropertyBinding: DiagramPropertyBinding;
    mindmapPropertyBinding: MindMapPropertyBinding;
    orgChartPropertyBinding: OrgChartPropertyBinding;
    downloadFile: DownloadExampleFiles;
    diagramThemes: DiagramTheme;
    layerFooterTemplate: string;
    private initLayerPanel;
    pasteData: boolean;
    overview: Overview;
    ngAfterViewInit(): void;
    private closeWindow;
    themeDialogCreated(args: Object): void;
    tooltipCreated(args: Object): void;
    renameDiagram(args: MouseEvent): void;
    diagramNameChange(args: MouseEvent): void;
    diagramNameKeyDown(args: KeyboardEvent): void;
    loadPage(): void;
    overviewSpanClick(args: MouseEvent): void;
    private buttonInstance;
    menumouseover(args: MouseEvent): void;
    hideMenuBar(): void;
    arrangeContextMenuBeforeOpen(args: BeforeOpenCloseMenuEventArgs): void;
    arrangeMenuBeforeOpen(args: BeforeOpenCloseMenuEventArgs): void;
    arrangeMenuBeforeClose(args: BeforeOpenCloseMenuEventArgs): void;
    arrangeContextMenuOpen(args: OpenCloseMenuEventArgs): void;
    getUploadButtons(): Object[];
    getDialogButtons(dialogType: string): Object[];
    private btnDeleteConfirmation;
    private btnUploadNext;
    private btnCancelClick;
    private btnHyperLink;
    private btnTooltip;
    private btnSave;
    saveDiagramSettings(): void;
    initClient(): Promise<{}>;
    getfile(): void;
    upload(): void;
    readonly isSignedIn: boolean;
    signIn(): Promise<void>;
    private registerBrowseEvent;
    btnImportClick(args: MouseEvent): void;
    private btnExportClick;
    private btnPrintClick;
    drawShapeChange(args: MenuEventArgs): void;
    drawConnectorChange(args: MenuEventArgs): void;
    orderCommandsChange(args: MenuEventArgs): void;
    zoomChange(args: MenuEventArgs): void;
    beforeItemRender(args: MenuEventArgs): void;
    getShortCutKey(menuItem: string): string;
    contextMenuClick(args: ContextMenuEventArgs): void;
    menuClick(args: MenuEventArgs): void;
    executeEditMenu(diagram: Diagram, commandType: string): void;
    private generateDiagram;
    setNodeDefaults(node: Node, diagram: Diagram): NodeModel;
    setConnectorDefaults(connector: Connector, diagram: Diagram): ConnectorModel;
    handle: UserHandleModel[];
    toolbarInsertClick(args: ClickEventArgs): void;
    toolbarEditorClick(args: ClickEventArgs): void;
    showColorPicker(propertyName: string, toolbarName: string): void;
    showHideLayers(): void;
    showHideThemes(): void;
    closeThemeDialog(args: Object): void;
    removeSelectedToolbarItem(): void;
    private lockObject;
    onUploadSuccess(args: {
        [key: string]: Object;
    }): void;
    onUploadFailure(args: {
        [key: string]: Object;
    }): void;
    onUploadFileSelected(args: {
        [key: string]: Object;
    }): void;
    setImage(event: ProgressEvent): void;
    loadDiagram(event: ProgressEvent): void;
    onTooltipBeforeRender(args: TooltipEventArgs): void;
    getCommandSettings(): CommandManagerModel;
    private cutObjects;
    private copyObjects;
    private pasteObjects;
    private sendToBack;
    private bringToFront;
    private group;
    private ungroup;
    private undo;
    private redo;
    private delete;
    private selectAll;
    private distribute;
    private canExecute;
}
